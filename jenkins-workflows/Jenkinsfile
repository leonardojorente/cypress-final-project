pipeline {
    // agent { // where the pipeline will run
    //     docker {
    //         image 'mcr.microsoft.com/playwright:v1.53.0-noble'
    //         args '-u root' // run as root user, so it can install the browsers
    //         label 'playwright' // use the label of the machine on jenkins to run playwright tests
    //         reuseNode true // reuse the node, so it doesn't create a new container for each stage
    //     }
    // }
    agent any // Use any available agent, use  the label o the machine on jenkins to run playwright tests

    parameters {
        choice(
            name: 'ENVIRONMENT', 
            choices: ['dev', 'prod'], 
            description: 'Select the environment to run the tests'
        )
    }

    environment {
        BASE_URL_WEB = "https://barrigareact.wcaquino.me"
        BASE_URL_API = "https://barrigarest.wcaquino.me"
        USER = credentials("user_${params.ENVIRONMENT}")
        PASSWORD = credentials("password_${params.ENVIRONMENT}")
    }

    stages {

        stage('Print env variables') {
            steps {
                script {
                    echo "ENVIRONMENT: ${params.ENVIRONMENT}"
                    echo "BASE_URL_API: ${env.BASE_URL_API}"
                    echo "BASE_URL_WEB: ${env.BASE_URL_WEB}"
                    echo "USER: ${env.USER}"
                    echo "PASSWORD: ${env.PASSWORD}"
                }
            }
        }

        stage('Install dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Static code analysis') {
            steps {
                script{
                    // ESLint checking
                    echo "Running ESLint checks..."
                    sh 'npm run eslint'
                }
            }
        }

        stage('Cypress tests') {
            steps {
                // Clean previous Allure results
                sh 'rm -rf results || true'
                
                sh 'npm run ui-login-tests || true'
            }

            post {
                always {
                    publishHTML (
                        target : [allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'cypress/reports/hmtl',
                        reportFiles: 'index.html',
                        reportName: 'Cypress Report',
                        reportTitles: 'Cypress Tests Report'])
                }
            }
        }
    }
}
